import{_ as a,l as i,K as s,d as p,L as n}from"./mermaid.core-4nVOEVX3.js";import{p as m}from"./treemap-75Q7IDZK-CnuVFbBG.js";import"./index-OC46250R.js";import"./transform-D9VCJYws.js";import"./timer-Bqd5yn_a.js";import"./step-BwsUM5iJ.js";import"./_baseEach-C1FLm7WW.js";import"./_baseUniq-Dk7ZPJ3N.js";import"./min-D259kI3t.js";import"./_baseMap-DBVArUYD.js";import"./clone-DM1YNjEn.js";import"./_createAggregator-Bn38fDd3.js";var d={parse:a(async r=>{const t=await m("info",r);i.debug(t)},"parse")},g={version:n.version+""},v={parser:d,db:{getVersion:a(()=>g.version,"getVersion")},renderer:{draw:a((r,t,o)=>{i.debug(`rendering info diagram
`+r);const e=s(t);p(e,100,400,!0),e.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${o}`)},"draw")}};export{v as diagram};
