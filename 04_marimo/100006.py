# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100006**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Verkehrszähldaten motorisierter Individualverkehr**
    **Description**: <p>Resultate der Messungen der Dauerzählstellen und Kurzzeitzählstellen für den Motorisierten Individualverkehr. </p><p>Aus Kostengründen sind nur die Werte des aktuellen Jahres und der letzten zwei Jahre als Tabelle / Visualisierung sichtbar bzw. via API abgreifbar. </p><p>Die Zählstellen, die zwischen allen Fahrzeugklassen unterscheiden können, ab dem Jahr 2014 können hier heruntergeladen werden: </p><ul><li><a href="https://data-bs.ch/mobilitaet/converted_MIV_Class_10_1.csv">Leicht aufbereiteter Datensatz: https://data-bs.ch/mobilitaet/converted_MIV_Class_10_1.csv</a> </li><li><a href="https://data-bs.ch/mobilitaet/MIV_Class_10_1.csv">Rohdaten: https://data-bs.ch/mobilitaet/MIV_Class_10_1.csv</a></li></ul><p>Die vollständigen Daten der Zählstellen, die mit FLIR (Forward Looking Infrared) messen und zwischen sechs Fahrzeugklassen unterscheiden können, können hier heruntergeladen werden:</p><ul><li><a href="https://data-bs.ch/mobilitaet/converted_FLIR_KtBS_MIV6.csv">Leicht aufbereiteter Datensatz: https://data-bs.ch/mobilitaet/converted_FLIR_KtBS_MIV6.csv</a></li><li><a href="https://data-bs.ch/mobilitaet/FLIR_KtBS_MIV6.csv">Rohdaten: https://data-bs.ch/mobilitaet/FLIR_KtBS_MIV6.csv</a></li></ul><p>Für die Lichtsignalanlagen (LSA) können die vollständigen Daten hier heruntergeladen werden:</p><ul><li><a href="https://data-bs.ch/mobilitaet/converted_MIV_LSA_Count.csv">Leicht aufbereiteter Datensatz: https://data-bs.ch/mobilitaet/converted_MIV_LSA_Count.csv</a></li><li><a href="https://data-bs.ch/mobilitaet/MIV_LSA_Count.csv">Rohdaten: https://data-bs.ch/mobilitaet/MIV_LSA_Count.csv</a></li></ul><p>Die Daten einzelner Jahre ab dem Jahr 2014 können unter der URL mit dem Muster https://data-bs.ch/mobilitaet/[JAHR]_MIV_Class_10_1.csv heruntergeladen werden, also zum Beispiel für das Jahr 2020 hier: https://data-bs.ch/mobilitaet/2020_MIV_Class_10_1.csv.<br>Für FLIR-Zähldaten muss folgendes Muster verwendet werden: https://data-bs.ch/mobilitaet/[JAHR]_FLIR_KtBS_MIV6.csv. <br>Für LSA-Zähldaten muss folgendes Muster verwendet werden: https://data-bs.ch/mobilitaet/[JAHR]_MIV_LSA.csv.</p><p>Die Zählstellen sind auf MET eingestellt (Spalten TimeFrom und TimeTo), d.h. die Zeitumstellung wird wie in Mitteleuropa ausgeführt. Bei der Umstellung von Winter- auf Sommerzeit fehlt die Stunde der Umstellung, dieser Tag hat dann 23 Stunden. Bei der Umstellung von Sommer- auf Winterzeit ist eine Stunde zu viel enthalten (der Tag hat dann 25 Stunden), die Stunde der Umstellung ist dann doppelt, aber mit unterschiedlichen Verkehrsdaten (da die gleiche Stunde zweimal durchlaufen wird).</p>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100006)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100006`
- **Title** `Verkehrszähldaten motorisierter Individualverkehr`
- **Description** `<p>Resultate der Messungen der Dauerzählstellen und Kurzzeitzählstellen für den Motorisierten Individualverkehr. </p><p>Aus Kostengründen sind nur die Werte des aktuellen Jahres und der letzten zwei Jahre als Tabelle / Visualisierung sichtbar bzw. via API abgreifbar. </p><p>Die Zählstellen, die zwischen allen Fahrzeugklassen unterscheiden können, ab dem Jahr 2014 können hier heruntergeladen werden: </p><ul><li><a href="https://data-bs.ch/mobilitaet/converted_MIV_Class_10_1.csv">Leicht aufbereiteter Datensatz: https://data-bs.ch/mobilitaet/converted_MIV_Class_10_1.csv</a> </li><li><a href="https://data-bs.ch/mobilitaet/MIV_Class_10_1.csv">Rohdaten: https://data-bs.ch/mobilitaet/MIV_Class_10_1.csv</a></li></ul><p>Die vollständigen Daten der Zählstellen, die mit FLIR (Forward Looking Infrared) messen und zwischen sechs Fahrzeugklassen unterscheiden können, können hier heruntergeladen werden:</p><ul><li><a href="https://data-bs.ch/mobilitaet/converted_FLIR_KtBS_MIV6.csv">Leicht aufbereiteter Datensatz: https://data-bs.ch/mobilitaet/converted_FLIR_KtBS_MIV6.csv</a></li><li><a href="https://data-bs.ch/mobilitaet/FLIR_KtBS_MIV6.csv">Rohdaten: https://data-bs.ch/mobilitaet/FLIR_KtBS_MIV6.csv</a></li></ul><p>Für die Lichtsignalanlagen (LSA) können die vollständigen Daten hier heruntergeladen werden:</p><ul><li><a href="https://data-bs.ch/mobilitaet/converted_MIV_LSA_Count.csv">Leicht aufbereiteter Datensatz: https://data-bs.ch/mobilitaet/converted_MIV_LSA_Count.csv</a></li><li><a href="https://data-bs.ch/mobilitaet/MIV_LSA_Count.csv">Rohdaten: https://data-bs.ch/mobilitaet/MIV_LSA_Count.csv</a></li></ul><p>Die Daten einzelner Jahre ab dem Jahr 2014 können unter der URL mit dem Muster https://data-bs.ch/mobilitaet/[JAHR]_MIV_Class_10_1.csv heruntergeladen werden, also zum Beispiel für das Jahr 2020 hier: https://data-bs.ch/mobilitaet/2020_MIV_Class_10_1.csv.<br>Für FLIR-Zähldaten muss folgendes Muster verwendet werden: https://data-bs.ch/mobilitaet/[JAHR]_FLIR_KtBS_MIV6.csv. <br>Für LSA-Zähldaten muss folgendes Muster verwendet werden: https://data-bs.ch/mobilitaet/[JAHR]_MIV_LSA.csv.</p><p>Die Zählstellen sind auf MET eingestellt (Spalten TimeFrom und TimeTo), d.h. die Zeitumstellung wird wie in Mitteleuropa ausgeführt. Bei der Umstellung von Winter- auf Sommerzeit fehlt die Stunde der Umstellung, dieser Tag hat dann 23 Stunden. Bei der Umstellung von Sommer- auf Winterzeit ist eine Stunde zu viel enthalten (der Tag hat dann 25 Stunden), die Stunde der Umstellung ist dann doppelt, aber mit unterschiedlichen Verkehrsdaten (da die gleiche Stunde zweimal durchlaufen wird).</p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2019-11-05`
- **Modified** `2025-09-19T07:27:42+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `2022-12-30T23:00:00+00:00`
- **Temporal_coverage_end_date** `2025-08-05T22:00:00+00:00`
- **Themes** `['Mobilität und Verkehr', 'Tourismus']`
- **Keywords** `['Autos', 'Motorräder', 'Busse', 'Lieferwagen', 'Lastwagen', 'Anhänger', 'Verkehr', 'Verkehrszählung', 'Erhebung']`
- **Publisher** `Amt für Mobilität`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url=f"https://data.bs.ch/explore/dataset/{dataset_id}/download"
        r = requests.get(
            url, 
            params={
                "format": "csv", 
                "timezone": "Europe%2FZurich"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100006")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
