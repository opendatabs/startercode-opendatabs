# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100382**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Solarkataster: Solarpotenzial**
    **Description**: Über den Solarkataster kann abgeschätzt werden, wie gut sich die Dach- und Fassadenflächen im Kantonsgebiet für die solare Nutzung eignen. Die ausgewiesenen Potenziale beruhen auf Modellrechnungen und stellen keine exakten Messwerte dar.
<br> Sämtliche Datensätze zu dem Produkt "Solarkataster": <a href="https://data.bs.ch/explore/?refine.tags=solarkataster" target="_blank">https://data.bs.ch/explore/?refine.tags=solarkataster</a> 
<br><strong>Zusätzliche Informationen</strong>
<br>Die ausgewiesenen Potenziale beruhen auf Strahlungsmodellierungen der Firma Laserdata GmbH aus Innsbruck und stellen keine exakten Messwerte dar. Sie können lediglich eine grobe Abschätzung zur Eignung einer Dachfläche für eine solare Nutzung ermöglichen.
Die Berechnung der solaren Globalstrahlung basiert auf dem 0.5m-Oberflächenmodell der Laserscan-Befliegung vom Frühjahr 2021 sowie der Fassaden des 3D Stadtmodells des Kantons Basel-Stadt. Die Gebäudeumrisse stammen aus der Ebene Bodenbedeckung der Amtlichen Vermessung vom 20.07.2021 und die Dachkanten vom 3D-Stadmodell Stand: 26.05.2021.

<br>Die Berechnungsschritte umfassen im Einzelnen:
<br>- Übernahme des digitalen Oberflächenmodells (DSM) sowie des 3D Stadtmodells vom Auftraggeber (z.B: des Kantons Basel-Stadt) in Softwaremodule der Firma Laserdata GmbH aus Innsbruck, Datenbankaufbau DSM, umliegendes Digitales Geländemodell (DGM), Indexierung, Tile-Generierung
<br>
- Strahlungsmodellierung der Dachflächen auf Rasterbasis DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg,
<br>
- Strahlungsmodellierung der Gebäudefassaden über synthetisch erzeugte Fassadenpunkte mit Neigung und Ausrichtung auf Basis des 3D Stadtmodells, DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg
<br>
- Berechnung von für verschiedene Zeiträume berechnete Globalstrahlungs-Rasterdatensätzen (insbesondere Sommer-, Winterhalbjahr, Jahressummenwert) des Solarpotenzials der Hausdächer. Einheit: Kilowattstunden pro m² und Bezugszeitraum
<br>
- Korrektur der unter clear sky Bedingungen modellierten Globalstrahlung anhand von meteorologischen Messwerten
<br>
- Einteilung der Eignung der Dachflächen zur solaren Nutzung in vom Auftraggeber bestimmte Klassen für Photovoltaik sowie Solarthermie unter Berücksichtigung von definierten Mindestflächen
<br>
- Zonalstatistik der Rasterinformationen des Solarpotenzials sowie der Fassadeneinstrahlung als Attributdaten zu einem Vektorlayer der Gebäudeumrisse des Auftraggebers des Kantons Basel-Stadt

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100382)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100382`
- **Title** `Solarkataster: Solarpotenzial`
- **Description** `Über den Solarkataster kann abgeschätzt werden, wie gut sich die Dach- und Fassadenflächen im Kantonsgebiet für die solare Nutzung eignen. Die ausgewiesenen Potenziale beruhen auf Modellrechnungen und stellen keine exakten Messwerte dar.
<br> Sämtliche Datensätze zu dem Produkt "Solarkataster": <a href="https://data.bs.ch/explore/?refine.tags=solarkataster" target="_blank">https://data.bs.ch/explore/?refine.tags=solarkataster</a> 
<br><strong>Zusätzliche Informationen</strong>
<br>Die ausgewiesenen Potenziale beruhen auf Strahlungsmodellierungen der Firma Laserdata GmbH aus Innsbruck und stellen keine exakten Messwerte dar. Sie können lediglich eine grobe Abschätzung zur Eignung einer Dachfläche für eine solare Nutzung ermöglichen.
Die Berechnung der solaren Globalstrahlung basiert auf dem 0.5m-Oberflächenmodell der Laserscan-Befliegung vom Frühjahr 2021 sowie der Fassaden des 3D Stadtmodells des Kantons Basel-Stadt. Die Gebäudeumrisse stammen aus der Ebene Bodenbedeckung der Amtlichen Vermessung vom 20.07.2021 und die Dachkanten vom 3D-Stadmodell Stand: 26.05.2021.

<br>Die Berechnungsschritte umfassen im Einzelnen:
<br>- Übernahme des digitalen Oberflächenmodells (DSM) sowie des 3D Stadtmodells vom Auftraggeber (z.B: des Kantons Basel-Stadt) in Softwaremodule der Firma Laserdata GmbH aus Innsbruck, Datenbankaufbau DSM, umliegendes Digitales Geländemodell (DGM), Indexierung, Tile-Generierung
<br>
- Strahlungsmodellierung der Dachflächen auf Rasterbasis DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg,
<br>
- Strahlungsmodellierung der Gebäudefassaden über synthetisch erzeugte Fassadenpunkte mit Neigung und Ausrichtung auf Basis des 3D Stadtmodells, DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg
<br>
- Berechnung von für verschiedene Zeiträume berechnete Globalstrahlungs-Rasterdatensätzen (insbesondere Sommer-, Winterhalbjahr, Jahressummenwert) des Solarpotenzials der Hausdächer. Einheit: Kilowattstunden pro m² und Bezugszeitraum
<br>
- Korrektur der unter clear sky Bedingungen modellierten Globalstrahlung anhand von meteorologischen Messwerten
<br>
- Einteilung der Eignung der Dachflächen zur solaren Nutzung in vom Auftraggeber bestimmte Klassen für Photovoltaik sowie Solarthermie unter Berücksichtigung von definierten Mindestflächen
<br>
- Zonalstatistik der Rasterinformationen des Solarpotenzials sowie der Fassadeneinstrahlung als Attributdaten zu einem Vektorlayer der Gebäudeumrisse des Auftraggebers des Kantons Basel-Stadt`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2024-08-15`
- **Modified** `2022-12-14T00:00:00+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `None`
- **Temporal_coverage_end_date** `None`
- **Themes** `['Energie']`
- **Keywords** `['Solarenergie', 'Solarkollektor']`
- **Publisher** `Amt für Umwelt und Energie`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url=f"https://data.bs.ch/explore/dataset/{dataset_id}/download"
        r = requests.get(
            url, 
            params={
                "format": "csv", 
                "timezone": "Europe%2FZurich"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100382")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
