# 100382 — marimo starter (Polars)
# Run:  marimo run 04_marimo/100382.py   (or: marimo edit ...)

# /// script
# requires-python = ">=3.10"
# dependencies = [
#   "marimo>=0.8.0",
#   "polars>=1.5.0",
#   "pandas>=2.0.0",
#   "matplotlib>=3.8.0",
#   "requests>=2.31.0"
# ]
# ///

import os
import io
import requests
import polars as pl
import pandas as pd
import marimo as mo
import matplotlib.pyplot as plt

app = mo.App()

PROVIDER = """Statistisches Amt des Kantons Basel-Stadt - Fachstelle OGD"""
IDENTIFIER = """100382"""
TITLE = """Solarkataster: Solarpotenzial"""
DESCRIPTION = """Über den Solarkataster kann abgeschätzt werden, wie gut sich die Dach- und Fassadenflächen im Kantonsgebiet für die solare Nutzung eignen. Die ausgewiesenen Potenziale beruhen auf Modellrechnungen und stellen keine exakten Messwerte dar.
<br> Sämtliche Datensätze zu dem Produkt 'Solarkataster': <a href='https://data.bs.ch/explore/?refine.tags=solarkataster' target='_blank'>https://data.bs.ch/explore/?refine.tags=solarkataster</a> 
<br><strong>Zusätzliche Informationen</strong>
<br>Die ausgewiesenen Potenziale beruhen auf Strahlungsmodellierungen der Firma Laserdata GmbH aus Innsbruck und stellen keine exakten Messwerte dar. Sie können lediglich eine grobe Abschätzung zur Eignung einer Dachfläche für eine solare Nutzung ermöglichen.
Die Berechnung der solaren Globalstrahlung basiert auf dem 0.5m-Oberflächenmodell der Laserscan-Befliegung vom Frühjahr 2021 sowie der Fassaden des 3D Stadtmodells des Kantons Basel-Stadt. Die Gebäudeumrisse stammen aus der Ebene Bodenbedeckung der Amtlichen Vermessung vom 20.07.2021 und die Dachkanten vom 3D-Stadmodell Stand: 26.05.2021.

<br>Die Berechnungsschritte umfassen im Einzelnen:
<br>- Übernahme des digitalen Oberflächenmodells (DSM) sowie des 3D Stadtmodells vom Auftraggeber (z.B: des Kantons Basel-Stadt) in Softwaremodule der Firma Laserdata GmbH aus Innsbruck, Datenbankaufbau DSM, umliegendes Digitales Geländemodell (DGM), Indexierung, Tile-Generierung
<br>
- Strahlungsmodellierung der Dachflächen auf Rasterbasis DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg,
<br>
- Strahlungsmodellierung der Gebäudefassaden über synthetisch erzeugte Fassadenpunkte mit Neigung und Ausrichtung auf Basis des 3D Stadtmodells, DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg
<br>
- Berechnung von für verschiedene Zeiträume berechnete Globalstrahlungs-Rasterdatensätzen (insbesondere Sommer-, Winterhalbjahr, Jahressummenwert) des Solarpotenzials der Hausdächer. Einheit: Kilowattstunden pro m² und Bezugszeitraum
<br>
- Korrektur der unter clear sky Bedingungen modellierten Globalstrahlung anhand von meteorologischen Messwerten
<br>
- Einteilung der Eignung der Dachflächen zur solaren Nutzung in vom Auftraggeber bestimmte Klassen für Photovoltaik sowie Solarthermie unter Berücksichtigung von definierten Mindestflächen
<br>
- Zonalstatistik der Rasterinformationen des Solarpotenzials sowie der Fassadeneinstrahlung als Attributdaten zu einem Vektorlayer der Gebäudeumrisse des Auftraggebers des Kantons Basel-Stadt"""
CONTACT = """Fachstelle für OGD Basel-Stadt | opendata@bs.ch"""
DATASHOP_MD_LINK = """[Direct data shop link for dataset](https://data.bs.ch/explore/dataset/100382)"""

def _ensure_data_dir():
    data_path = os.path.join(os.getcwd(), "..", "data")
    os.makedirs(data_path, exist_ok=True)
    return data_path

def get_dataset(url: str) -> pl.DataFrame:
    _ensure_data_dir()
    csv_path = os.path.join("..", "data", f"{IDENTIFIER}.csv")

    try:
        r = requests.get(
            url,
            params={"format": "csv", "timezone": "Europe%2FZurich"},
            timeout=60,
        )
        r.raise_for_status()
        with open(csv_path, "wb") as f:
            f.write(r.content)
        content = io.BytesIO(r.content)
    except Exception:
        content = csv_path if os.path.exists(csv_path) else None

    if content is None:
        raise RuntimeError("Could not download or locate dataset locally.")

    for sep in (";", ",", "\t"):
        try:
            df = pl.read_csv(
                content,
                separator=sep,
                ignore_errors=True,
                infer_schema_length=2000,
            )
            if df.width > 1:
                return df
        except Exception:
            if hasattr(content, "seek"):
                content.seek(0)

    return pl.read_csv(content, ignore_errors=True, infer_schema_length=2000)

def drop_all_null_columns(df: pl.DataFrame) -> pl.DataFrame:
    if df.height == 0:
        return df
    null_counts_row = df.null_count().row(0)
    cols_keep = [c for c, n in zip(df.columns, null_counts_row) if n < df.height]
    return df.select(cols_keep)

@app.cell
def _():
    mo.md(
        f"""## Open Government Data, provided by **{PROVIDER}**
*Autogenerated Python (marimo) starter for dataset* **`{IDENTIFIER}`**"""
    )
    return

@app.cell
def _():
    mo.md(
        f"""## Dataset
# **{TITLE}**"""
    )
    return

@app.cell
def _():
    mo.md(
        """## Data set links

""" + DATASHOP_MD_LINK
    )
    return

@app.cell
def _():
    mo.md(
        """## Metadata
- **Dataset_identifier** `100382`
- **Title** `Solarkataster: Solarpotenzial`
- **Description** `Über den Solarkataster kann abgeschätzt werden, wie gut sich die Dach- und Fassadenflächen im Kantonsgebiet für die solare Nutzung eignen. Die ausgewiesenen Potenziale beruhen auf Modellrechnungen und stellen keine exakten Messwerte dar.
<br> Sämtliche Datensätze zu dem Produkt "Solarkataster": <a href="https://data.bs.ch/explore/?refine.tags=solarkataster" target="_blank">https://data.bs.ch/explore/?refine.tags=solarkataster</a> 
<br><strong>Zusätzliche Informationen</strong>
<br>Die ausgewiesenen Potenziale beruhen auf Strahlungsmodellierungen der Firma Laserdata GmbH aus Innsbruck und stellen keine exakten Messwerte dar. Sie können lediglich eine grobe Abschätzung zur Eignung einer Dachfläche für eine solare Nutzung ermöglichen.
Die Berechnung der solaren Globalstrahlung basiert auf dem 0.5m-Oberflächenmodell der Laserscan-Befliegung vom Frühjahr 2021 sowie der Fassaden des 3D Stadtmodells des Kantons Basel-Stadt. Die Gebäudeumrisse stammen aus der Ebene Bodenbedeckung der Amtlichen Vermessung vom 20.07.2021 und die Dachkanten vom 3D-Stadmodell Stand: 26.05.2021.

<br>Die Berechnungsschritte umfassen im Einzelnen:
<br>- Übernahme des digitalen Oberflächenmodells (DSM) sowie des 3D Stadtmodells vom Auftraggeber (z.B: des Kantons Basel-Stadt) in Softwaremodule der Firma Laserdata GmbH aus Innsbruck, Datenbankaufbau DSM, umliegendes Digitales Geländemodell (DGM), Indexierung, Tile-Generierung
<br>
- Strahlungsmodellierung der Dachflächen auf Rasterbasis DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg,
<br>
- Strahlungsmodellierung der Gebäudefassaden über synthetisch erzeugte Fassadenpunkte mit Neigung und Ausrichtung auf Basis des 3D Stadtmodells, DGM (Topographie) und DSM (Nahverschattung) über ein astronomisches Jahr hinweg
<br>
- Berechnung von für verschiedene Zeiträume berechnete Globalstrahlungs-Rasterdatensätzen (insbesondere Sommer-, Winterhalbjahr, Jahressummenwert) des Solarpotenzials der Hausdächer. Einheit: Kilowattstunden pro m² und Bezugszeitraum
<br>
- Korrektur der unter clear sky Bedingungen modellierten Globalstrahlung anhand von meteorologischen Messwerten
<br>
- Einteilung der Eignung der Dachflächen zur solaren Nutzung in vom Auftraggeber bestimmte Klassen für Photovoltaik sowie Solarthermie unter Berücksichtigung von definierten Mindestflächen
<br>
- Zonalstatistik der Rasterinformationen des Solarpotenzials sowie der Fassadeneinstrahlung als Attributdaten zu einem Vektorlayer der Gebäudeumrisse des Auftraggebers des Kantons Basel-Stadt`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2024-08-15`
- **Modified** `2022-12-14T00:00:00+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `None`
- **Temporal_coverage_end_date** `None`
- **Themes** `['Energie']`
- **Keywords** `['Solarenergie', 'Solarkollektor']`
- **Publisher** `Amt für Umwelt und Energie`
- **Reference** `None`
"""
    )
    return

@app.cell
def _():
    mo.md(
        """## Imports and helper functions
Using Polars for speed and memory efficiency."""
    )
    return

@app.cell
def _():
    pass

@app.cell
def _():
    mo.md(
        """## Load data
The dataset is read into a Polars DataFrame."""
    )
    return

@app.cell
def _():
    df = get_dataset('https://data.bs.ch/explore/dataset/100382/download?format=csv&timezone=Europe%2FZurich')
    df = drop_all_null_columns(df)
    mo.md(
        f"Loaded **{df.height:,}** rows × **{df.width:,}** columns after dropping all-null columns."
    )
    df
    return df

@app.cell
def _(df):
    mo.md("## Quick profile")
    duplicates = int(df.is_duplicated().sum()) if df.height else 0
    schema = "\n".join([f"- `{k}`: {v}" for k, v in df.schema.items()])
    try:
        size_mb = f"{(df.estimated_size() or 0)/1_048_576:,.2f} MB"
    except Exception:
        size_mb = "n/a"
    mo.md(
        f"""- Approx. memory size: **{size_mb}**  
- Exact duplicates (row-wise): **{duplicates:,}**  
- Schema:
{schema}"""
    )
    return

@app.cell
def _(df):
    mo.md("### Head (first 5 rows)")
    df.head(5)
    return

@app.cell
def _(df):
    mo.md("### Describe (numeric columns)")
    try:
        desc = df.describe()
        desc
    except Exception:
        mo.md("_No numeric columns to describe._")
    return

@app.cell
def _(df):
    mo.md("### Missingness overview (first 1,000 rows, up to 40 columns)")
    n = min(1000, df.height)
    c = min(40, df.width)
    if n == 0 or c == 0:
        mo.md("_Dataset empty._")
    else:
        sub = df.select(df.columns[:c]).head(n)
        miss = sub.to_pandas().isna().to_numpy()
        plt.figure()
        plt.imshow(miss, aspect="auto", interpolation="nearest")
        plt.title("Missingness matrix (True=missing)")
        plt.xlabel("columns")
        plt.ylabel("rows")
        plt.tight_layout()
        plt.show()
    return

@app.cell
def _(df):
    mo.md("### Histograms (numeric)")
    num_cols = [c for c, t in df.schema.items() if pl.datatypes.is_numeric(t)]
    if not num_cols:
        mo.md("_No numeric data to plot._")
    else:
        for c in num_cols[:24]:
            s = df.select(c).drop_nulls()
            if s.height == 0:
                continue
            plt.figure()
            plt.hist(s.to_series().to_list(), bins=25)
            plt.title(f"Histogram: {c}")
            plt.tight_layout()
            plt.show()
    return

@app.cell
def _():
    mo.md(f"""**Questions about the data?** {CONTACT}""")
    return

if __name__ == "__main__":
    app.run()
