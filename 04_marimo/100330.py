# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100330**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Handelsregister: Firmen mit Rechtsform und Standort**
    **Description**: <p>Dieser Datensatz umfasst die Firmen des Kantons Basel-Stadt, die im Handelsregister des Zefix (Zentraler Firmenindex) registriert sind. Das Zefix bildet das öffentlich zugängliche Angebot des Eidgenössischen Amtes für das Handelsregister (EHRA). Es stellt die Daten des Zentralregisters über verschiedene Zugänge wie die Zefix Webapplikation (<a href="https://www.zefix.admin.ch/" target="_blank">https://www.zefix.admin.ch/</a>), die Zefix REST API (<a href="https://www.zefix.admin.ch/ZefixPublicREST/swagger-ui/index.html" target="_blank">https://www.zefix.admin.ch/ZefixPublicREST/swagger-ui/index.html</a>), die Zefix Mobile App (<a href="https://www.zefixapp.ch" target="_blank">https://www.zefixapp.ch</a>/) und als Linked Data in LINDAS (<a href="https://lindas.admin.ch/" target="_blank">https://lindas.admin.ch/</a>, was hier verwendet wurde) über das Internet zur Verfügung. Über Zefix können die Daten sämtlicher im Handelsregister eingetragener Rechtseinheiten sowie die täglichen Handelsregisterpublikationen im SHAB (Schweizerischen Handelsamtsblatt, <a href="https://www.shab.ch/" target="_blank">https://www.shab.ch/</a>) abgerufen werden. Der hier angebotene Datensatz beinhaltet tagesaktuelle Kerndaten der aktiven, im Handelsregister eingetragenen Rechtseinheiten, wie Firma/Name, Sitz und Domiziladresse.</p><p>LINDAS (Linked Data Service) fungiert in diesem Kontext als Plattform für die Vernetzung und den Zugriff auf diverse Datenquellen in der Schweiz, einschliesslich der Daten aus dem Zefix. Zur Gewinnung spezifischer Informationen über die im Kanton Basel-Stadt registrierten Unternehmen wird eine SPARQL-Abfrage verwendet. SPARQL, eine Abfragesprache für Daten im RDF-Format, ermöglicht den Zugriff auf detaillierte Datensätze über die Firmen aus dem LINDAS-Netzwerk. Die SPARQL-Abfrage kann unter einem bereitgestellten Link (<a href="https://s.zazuko.com/2WjT8iZ" target="_blank">https://s.zazuko.com/2WjT8iZ</a>) aufgerufen werden. Die Abfrage wurde mithilfe der vorhandenen SPARQL-Abfrage von opendata.swiss (<a href="https://opendata.swiss/de/dataset/zefix-zentraler-firmenindex" target="_blank">https://opendata.swiss/de/dataset/zefix-zentraler-firmenindex</a>) zum Zefix erweitert: <a href="https://github.com/opendatabs/data-processing/blob/master/zefix_handelsregister/etl.py" target="_blank">https://github.com/opendatabs/data-processing/blob/master/zefix_handelsregister/etl.py</a></p><p>Diese Zefix-Daten und die der anderen Kantone werden von Open Data Basel-Stadt täglich aktualisiert und können unter folgendem HTTPS-Link heruntergeladen werden: <br><i>https://data-bs.ch/stata/zefix_handelsregister/all_cantons/companies_[Kantonskürzel].csv<br></i>Im Beispiel von Basel-Landschaft lautet der Link:<br><a href="https://data-bs.ch/stata/zefix_handelsregister/all_cantons/companies_BL.csv" target="_blank">https://data-bs.ch/stata/zefix_handelsregister/all_cantons/companies_BL.csv </a><br></p><p>Der Datensatz enthält neben den Grundinformationen der Firmen auch erweiterte Spalten wie die Koordinaten der Unternehmen, die mithilfe der Betriebsadresse und von Nominatim (<a href="https://nominatim.org/" target="_blank">https://nominatim.org/</a>) berechnet wurden. Nominatim ist ein Open-Source-Tool zur Geokodierung, das heisst, es wandelt Standortdaten wie Adressen oder Ortsnamen in geografische Koordinaten (Längen- und Breitengrade) um und umgekehrt.</p>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100330)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100330`
- **Title** `Handelsregister: Firmen mit Rechtsform und Standort`
- **Description** `<p>Dieser Datensatz umfasst die Firmen des Kantons Basel-Stadt, die im Handelsregister des Zefix (Zentraler Firmenindex) registriert sind. Das Zefix bildet das öffentlich zugängliche Angebot des Eidgenössischen Amtes für das Handelsregister (EHRA). Es stellt die Daten des Zentralregisters über verschiedene Zugänge wie die Zefix Webapplikation (<a href="https://www.zefix.admin.ch/" target="_blank">https://www.zefix.admin.ch/</a>), die Zefix REST API (<a href="https://www.zefix.admin.ch/ZefixPublicREST/swagger-ui/index.html" target="_blank">https://www.zefix.admin.ch/ZefixPublicREST/swagger-ui/index.html</a>), die Zefix Mobile App (<a href="https://www.zefixapp.ch" target="_blank">https://www.zefixapp.ch</a>/) und als Linked Data in LINDAS (<a href="https://lindas.admin.ch/" target="_blank">https://lindas.admin.ch/</a>, was hier verwendet wurde) über das Internet zur Verfügung. Über Zefix können die Daten sämtlicher im Handelsregister eingetragener Rechtseinheiten sowie die täglichen Handelsregisterpublikationen im SHAB (Schweizerischen Handelsamtsblatt, <a href="https://www.shab.ch/" target="_blank">https://www.shab.ch/</a>) abgerufen werden. Der hier angebotene Datensatz beinhaltet tagesaktuelle Kerndaten der aktiven, im Handelsregister eingetragenen Rechtseinheiten, wie Firma/Name, Sitz und Domiziladresse.</p><p>LINDAS (Linked Data Service) fungiert in diesem Kontext als Plattform für die Vernetzung und den Zugriff auf diverse Datenquellen in der Schweiz, einschliesslich der Daten aus dem Zefix. Zur Gewinnung spezifischer Informationen über die im Kanton Basel-Stadt registrierten Unternehmen wird eine SPARQL-Abfrage verwendet. SPARQL, eine Abfragesprache für Daten im RDF-Format, ermöglicht den Zugriff auf detaillierte Datensätze über die Firmen aus dem LINDAS-Netzwerk. Die SPARQL-Abfrage kann unter einem bereitgestellten Link (<a href="https://s.zazuko.com/2WjT8iZ" target="_blank">https://s.zazuko.com/2WjT8iZ</a>) aufgerufen werden. Die Abfrage wurde mithilfe der vorhandenen SPARQL-Abfrage von opendata.swiss (<a href="https://opendata.swiss/de/dataset/zefix-zentraler-firmenindex" target="_blank">https://opendata.swiss/de/dataset/zefix-zentraler-firmenindex</a>) zum Zefix erweitert: <a href="https://github.com/opendatabs/data-processing/blob/master/zefix_handelsregister/etl.py" target="_blank">https://github.com/opendatabs/data-processing/blob/master/zefix_handelsregister/etl.py</a></p><p>Diese Zefix-Daten und die der anderen Kantone werden von Open Data Basel-Stadt täglich aktualisiert und können unter folgendem HTTPS-Link heruntergeladen werden: <br><i>https://data-bs.ch/stata/zefix_handelsregister/all_cantons/companies_[Kantonskürzel].csv<br></i>Im Beispiel von Basel-Landschaft lautet der Link:<br><a href="https://data-bs.ch/stata/zefix_handelsregister/all_cantons/companies_BL.csv" target="_blank">https://data-bs.ch/stata/zefix_handelsregister/all_cantons/companies_BL.csv </a><br></p><p>Der Datensatz enthält neben den Grundinformationen der Firmen auch erweiterte Spalten wie die Koordinaten der Unternehmen, die mithilfe der Betriebsadresse und von Nominatim (<a href="https://nominatim.org/" target="_blank">https://nominatim.org/</a>) berechnet wurden. Nominatim ist ein Open-Source-Tool zur Geokodierung, das heisst, es wandelt Standortdaten wie Adressen oder Ortsnamen in geografische Koordinaten (Längen- und Breitengrade) um und umgekehrt.</p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2024-01-18`
- **Modified** `2025-10-03T00:12:05+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `None`
- **Temporal_coverage_end_date** `None`
- **Themes** `['Industrie, Dienstleistungen', 'Volkswirtschaft']`
- **Keywords** `['Handelsregister', 'Zefix', 'Unternehmen', 'Betrieb', 'Betriebe', 'Aktiengesellschaft', 'Einzelunternehmen', 'Genossenschaft', 'GMBH', 'Kollektivgesellschaft', 'Stiftung', 'Verein']`
- **Publisher** `Open Data Basel-Stadt`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url = f"https://data.bs.ch/api/explore/v2.1/catalog/datasets/{dataset_id}/exports/csv"
        r = requests.get(
            url, 
            params={
                "timezone": "Europe%2FZurich",
                "use_labels": "true"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100330")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
