# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100048**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Luftqualität Station Chrischona**
    **Description**: <p>Standortbeschreibung: Die Messstation befindet sich auf halber Höhe des Chrischonaturms. Dieser liegt auf einer Anhöhe östlich der Stadt Basel. In der Nähe der Station Chrischona befinden sich keine Abgasquellen. Sie gibt die Luftsituation wieder im ländlichen Umland der Stadt Basel, auf einer Höhenlage von 640m über Meer. In diesem Höhenbereich liegt oft auch die Inversion in der Nordwestschweiz.</p><p>Lage: Ländlich unterhalb 1000 m ü.M., keine Bebauung</p><p>Koordinaten: 2618695 / 1269030 bzw. N 47° 34.302 E 7° 41.225; 636 m ü. M.</p><p>Geografische Lage: Schwarzwaldrand</p><p>Siedlungsgrösse: ausserhalb</p>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100048)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100048`
- **Title** `Luftqualität Station Chrischona`
- **Description** `<p>Standortbeschreibung: Die Messstation befindet sich auf halber Höhe des Chrischonaturms. Dieser liegt auf einer Anhöhe östlich der Stadt Basel. In der Nähe der Station Chrischona befinden sich keine Abgasquellen. Sie gibt die Luftsituation wieder im ländlichen Umland der Stadt Basel, auf einer Höhenlage von 640m über Meer. In diesem Höhenbereich liegt oft auch die Inversion in der Nordwestschweiz.</p><p>Lage: Ländlich unterhalb 1000 m ü.M., keine Bebauung</p><p>Koordinaten: 2618695 / 1269030 bzw. N 47° 34.302 E 7° 41.225; 636 m ü. M.</p><p>Geografische Lage: Schwarzwaldrand</p><p>Siedlungsgrösse: ausserhalb</p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2019-11-06`
- **Modified** `2025-09-24T07:16:21+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `1999-12-31T23:00:00+00:00`
- **Temporal_coverage_end_date** `2025-09-23T22:00:00+00:00`
- **Themes** `['Raum und Umwelt', 'Gesundheit', 'Tourismus']`
- **Keywords** `['Luft', 'Ozon']`
- **Publisher** `Lufthygieneamt beider Basel`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url=f"https://data.bs.ch/explore/dataset/{dataset_id}/download"
        r = requests.get(
            url, 
            params={
                "format": "csv", 
                "timezone": "Europe%2FZurich"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100048")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
