# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100075**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Fahrgastzahlen BVB**
    **Description**: <div>Die Daten umfassen die wöchentlichen Fahrgastzahlen der Basler Verkehrsbetriebe (BVB) von 2020 bis 2023. Ab 2024 werden monatliche Werte erfasst. Sie beruhen auf Messungen mit dem automatischen Fahrgastzählsystem und anschliessender Hochrechnung, und zwar für das gesamte Liniennetz der BVB. Tramlinien: 1, 2, 3, 6, 8, 14, 15, 16, 21; Buslinien: 30, 31, 32, 33, 34, 35, 36, 38, 42, 45, 46, 48, 50, Tramersatzverkehr.</div><div><br></div><div>Nicht enthalten sind hingegen die Fahrgastzahlen der SBB, BLT oder ausländischer Transportunternehmen.</div><div><br>Die Daten werden jeweils am 10. jeden Monats resp. am darauffolgenden Werktag aktualisiert.</div><div><br>In Ausnahmefällen kann es aus technischen Gründen zu Verzögerungen im Prozess der Bereitstellung und Auswertung von Zähldaten kommen. Nachträglich verfügbare Messdaten werden in der hier vorliegenden Auswertung berücksichtigt, was in diesem Fall zu rückwirkenden Korrekturen führen kann.</div><div><br></div><div>Änderungsprotokoll: </div><div>02.02.2024: Die Auswertungen auf Wochenbasis werden eingestellt und nur noch die Zeitreihe der Monatswerte werden fortgeführt.<br></div>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100075)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100075`
- **Title** `Fahrgastzahlen BVB`
- **Description** `<div>Die Daten umfassen die wöchentlichen Fahrgastzahlen der Basler Verkehrsbetriebe (BVB) von 2020 bis 2023. Ab 2024 werden monatliche Werte erfasst. Sie beruhen auf Messungen mit dem automatischen Fahrgastzählsystem und anschliessender Hochrechnung, und zwar für das gesamte Liniennetz der BVB. Tramlinien: 1, 2, 3, 6, 8, 14, 15, 16, 21; Buslinien: 30, 31, 32, 33, 34, 35, 36, 38, 42, 45, 46, 48, 50, Tramersatzverkehr.</div><div><br></div><div>Nicht enthalten sind hingegen die Fahrgastzahlen der SBB, BLT oder ausländischer Transportunternehmen.</div><div><br>Die Daten werden jeweils am 10. jeden Monats resp. am darauffolgenden Werktag aktualisiert.</div><div><br>In Ausnahmefällen kann es aus technischen Gründen zu Verzögerungen im Prozess der Bereitstellung und Auswertung von Zähldaten kommen. Nachträglich verfügbare Messdaten werden in der hier vorliegenden Auswertung berücksichtigt, was in diesem Fall zu rückwirkenden Korrekturen führen kann.</div><div><br></div><div>Änderungsprotokoll: </div><div>02.02.2024: Die Auswertungen auf Wochenbasis werden eingestellt und nur noch die Zeitreihe der Monatswerte werden fortgeführt.<br></div>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2020-05-16`
- **Modified** `2025-09-10T15:00:30+00:00`
- **Rights** `NonCommercialAllowed-CommercialWithPermission-ReferenceRequired`
- **Temporal_coverage_start_date** `2020-02-02T23:00:00+00:00`
- **Temporal_coverage_end_date** `2025-07-31T22:00:00+00:00`
- **Themes** `['Mobilität und Verkehr', 'Tourismus']`
- **Keywords** `['Tram', 'Bus', 'Haltestelle', 'Einsteiger', 'Fahrgäste', 'Passagier']`
- **Publisher** `Basler Verkehrs-Betriebe`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url=f"https://data.bs.ch/explore/dataset/{dataset_id}/download"
        r = requests.get(
            url, 
            params={
                "format": "csv", 
                "timezone": "Europe%2FZurich"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100075")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
