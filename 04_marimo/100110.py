# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100110**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Coronavirus (COVID-19): Reproduktionszahl (Re)**
    **Description**: <p>Geschätzte tägliche effektive Reproduktionszahl für die Schweiz, die Schweizer Grossregionen sowie die Schweizer Kantone. Die effektive Reproduktionszahl ist ein Mass dafür, wie viele Personen eine infizierte Person durchschnittlich ansteckt. Die Werte wurden täglich von der ETH Zürich berechnet. Die Originaldaten sind auf <a href="https://github.com/covid-19-Re/dailyRe-Data" target="_blank">https://github.com/covid-19-Re/dailyRe-Data</a> sowie <a href="https://github.com/covid-19-Re/dailyRe-Data/blob/master/CHE-estimates.csv" target="_blank">https://github.com/covid-19-Re/dailyRe-Data/blob/master/CHE-estimates.csv</a> verfügbar.</p><p>Die geschätzte effektive Reproduktionszahl bildet aufgrund der Infektionsdynamik (Inkubationszeit, Meldeverzug, etc.) schweizweit das Infektionsgeschehen erst mit einer zeitlichen Verzögerung von 10-13 Tagen ab. Auf kantonaler Ebene beträgt die zeitliche Verzögerung 14-17 Tage. </p><p>Weitere Informationen zur Interpretation der effektiven Reproduktionszahl finden sich bei der Swiss National COVID-19 Task Force: <a href="https://sciencetaskforce.ch/reproduktionszahl/" target="_blank">https://sciencetaskforce.ch/reproduktionszahl/</a> </p><p>Details und Quellenangaben zur verwendeten Methodik finden sich auf dem COVID-19-Dashboard der ETH Zürich: <a href="https://ibz-shiny.ethz.ch/covid-19-re-international/" target="_blank">https://ibz-shiny.ethz.ch/covid-19-re-international/</a> </p><div><br></div>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100110)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100110`
- **Title** `Coronavirus (COVID-19): Reproduktionszahl (Re)`
- **Description** `<p>Geschätzte tägliche effektive Reproduktionszahl für die Schweiz, die Schweizer Grossregionen sowie die Schweizer Kantone. Die effektive Reproduktionszahl ist ein Mass dafür, wie viele Personen eine infizierte Person durchschnittlich ansteckt. Die Werte wurden täglich von der ETH Zürich berechnet. Die Originaldaten sind auf <a href="https://github.com/covid-19-Re/dailyRe-Data" target="_blank">https://github.com/covid-19-Re/dailyRe-Data</a> sowie <a href="https://github.com/covid-19-Re/dailyRe-Data/blob/master/CHE-estimates.csv" target="_blank">https://github.com/covid-19-Re/dailyRe-Data/blob/master/CHE-estimates.csv</a> verfügbar.</p><p>Die geschätzte effektive Reproduktionszahl bildet aufgrund der Infektionsdynamik (Inkubationszeit, Meldeverzug, etc.) schweizweit das Infektionsgeschehen erst mit einer zeitlichen Verzögerung von 10-13 Tagen ab. Auf kantonaler Ebene beträgt die zeitliche Verzögerung 14-17 Tage. </p><p>Weitere Informationen zur Interpretation der effektiven Reproduktionszahl finden sich bei der Swiss National COVID-19 Task Force: <a href="https://sciencetaskforce.ch/reproduktionszahl/" target="_blank">https://sciencetaskforce.ch/reproduktionszahl/</a> </p><p>Details und Quellenangaben zur verwendeten Methodik finden sich auf dem COVID-19-Dashboard der ETH Zürich: <a href="https://ibz-shiny.ethz.ch/covid-19-re-international/" target="_blank">https://ibz-shiny.ethz.ch/covid-19-re-international/</a> </p><div><br></div>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2020-12-23`
- **Modified** `2023-01-31T16:03:40+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceNotRequired`
- **Temporal_coverage_start_date** `2020-05-23T22:00:00+00:00`
- **Temporal_coverage_end_date** `2022-12-15T23:00:00+00:00`
- **Themes** `['Gesundheit']`
- **Keywords** `['Coronavirus', 'Reproduktionszahl', 'Re', 'R-Wert', 'Re-Wert', 'COVID-19', 'Corona', 'Krankheit', 'Lungenentzündung']`
- **Publisher** `ETH Zurich, Department of Biosystems Science and Engineering`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url = f"https://data.bs.ch/api/explore/v2.1/catalog/datasets/{dataset_id}/exports/csv"
        r = requests.get(
            url, 
            params={
                "timezone": "Europe%2FZurich",
                "use_labels": "true"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100110")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
