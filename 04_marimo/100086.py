# 100086 — marimo starter (Polars)
# Run:  marimo run 04_marimo/100086.py   (or: marimo edit ...)

import os
import io
import requests
import polars as pl
import marimo as mo
import matplotlib.pyplot as plt

app = mo.app()

# --- CONFIG / LINKS -----------------------------------------------------------
PROVIDER = "Statistisches Amt des Kantons Basel-Stadt - Fachstelle OGD"
IDENTIFIER = "100086"
TITLE = "Grosser Rat: Politische Vorstösse"
DESCRIPTION = "<p>Dieser Datensatz ermöglichte einen thematischen Überblick über die politischen Vorstösse des Grossen Rats des Kantons Basel-Stadt. Es sind darin Geschäfte zwischen Januar 2019 und März 2024 enthalten, welche überwiesen und manuell mit Thema kategorisiert worden sind. Die Zuteilung zu Themen erfolgte durch die Kantons- und Stadtentwicklung. Eine Datenvisualisierung war unter <a href='https://politmonitor.bs.ch' target='_blank'>politmonitor.bs.ch</a> auffindbar.</p><p>Wichtig: Seit März 2024 wird dieser Datensatz nicht mehr aktualisiert, und die Visualisierung ist nicht mehr einsehbar. Wir arbeiten daran, die politischen Vorstösse neu mittels KI zu kategorisieren, und die Visualisierung wieder zu publizieren, und hoffen, dies im Verlauf des Jahres 2025 abschliessen zu können. </p><p>Siehe auch Datensatz 'Grosser Rat: Geschäfte':  (<a href='https://data.bs.ch/explore/dataset/100311' target='_blank'>https://data.bs.ch/explore/dataset/100311</a>)</p>"
CONTACT = "Fachstelle für OGD Basel-Stadt | opendata@bs.ch"
DATASHOP_MD_LINK = """[Direct data shop link for dataset](https://data.bs.ch/explore/dataset/100086)"""

# --- HELPERS ------------------------------------------------------------------
def _ensure_data_dir():
    data_path = os.path.join(os.getcwd(), "..", "data")
    os.makedirs(data_path, exist_ok=True)
    return data_path

def get_dataset(url: str) -> pl.DataFrame:
    """Download CSV once (to ../data) and read with Polars.
    Tries common delimiters (;, ',', '\\t')."""
    _ensure_data_dir()
    csv_path = os.path.join("..", "data", f"{IDENTIFIER}.csv")

    # Download (idempotent)
    try:
        r = requests.get(url, params={"format": "csv", "timezone": "Europe%2FZurich"}, timeout=60)
        r.raise_for_status()
        with open(csv_path, "wb") as f:
            f.write(r.content)
        content = io.BytesIO(r.content)
    except Exception:
        # Fallback to local file if present
        content = csv_path if os.path.exists(csv_path) else None

    if content is None:
        raise RuntimeError("Could not download or locate dataset locally.")

    # Try delimiters
    for sep in (";", ",", "\t"):
        try:
            df = pl.read_csv(content, separator=sep, ignore_errors=True, infer_schema_length=2000)
            if df.width > 1:  # likely correct delimiter
                return df
        except Exception:
            content.seek(0) if hasattr(content, "seek") else None

    # Last attempt: let Polars auto-detect
    return pl.read_csv(content, ignore_errors=True, infer_schema_length=2000)

def drop_all_null_columns(df: pl.DataFrame) -> pl.DataFrame:
    if df.height == 0:
        return df
    null_counts_row = df.null_count().row(0)
    cols_keep = [c for c, n in zip(df.columns, null_counts_row) if n < df.height]
    return df.select(cols_keep)

# --- UI CELLS -----------------------------------------------------------------
@app.cell
def _():
    mo.md(f"""
## Open Government Data, provided by **{PROVIDER}**  
*Autogenerated Python (marimo) starter for dataset* **`{IDENTIFIER}`**
""")
    return

@app.cell
def _():
    mo.md(f"## Dataset\n# **{TITLE}**")
    return

@app.cell
def _():
    mo.md("""## Data set links

""" + DATASHOP_MD_LINK)
    return

@app.cell
def _():
    mo.md("## Metadata\n- **Dataset_identifier** `100086`
- **Title** `Grosser Rat: Politische Vorstösse`
- **Description** `<p>Dieser Datensatz ermöglichte einen thematischen Überblick über die politischen Vorstösse des Grossen Rats des Kantons Basel-Stadt. Es sind darin Geschäfte zwischen Januar 2019 und März 2024 enthalten, welche überwiesen und manuell mit Thema kategorisiert worden sind. Die Zuteilung zu Themen erfolgte durch die Kantons- und Stadtentwicklung. Eine Datenvisualisierung war unter <a href='https://politmonitor.bs.ch' target='_blank'>politmonitor.bs.ch</a> auffindbar.</p><p>Wichtig: Seit März 2024 wird dieser Datensatz nicht mehr aktualisiert, und die Visualisierung ist nicht mehr einsehbar. Wir arbeiten daran, die politischen Vorstösse neu mittels KI zu kategorisieren, und die Visualisierung wieder zu publizieren, und hoffen, dies im Verlauf des Jahres 2025 abschliessen zu können. </p><p>Siehe auch Datensatz 'Grosser Rat: Geschäfte':  (<a href='https://data.bs.ch/explore/dataset/100311' target='_blank'>https://data.bs.ch/explore/dataset/100311</a>)</p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2020-06-29`
- **Modified** `2025-09-15T02:00:25+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `2019-01-08T23:00:00+00:00`
- **Temporal_coverage_end_date** `2024-03-05T23:00:00+00:00`
- **Themes** `['Politik', 'Gesetzgebung']`
- **Keywords** `['Parlament', 'Legislative', 'Geschäft', 'Grossrat', 'Politiker', 'Partei', 'Grossrätin']`
- **Publisher** `Parlamentsdienst des Grossen Rates`
- **Reference** `None`
")
    return

@app.cell
def _():
    mo.md("## Imports and helper functions\nUsing Polars for speed and memory efficiency.")
    return

@app.cell
def _():
    # Intentionally empty: imports are at the top of the file
    pass

@app.cell
def _():
    mo.md("## Load data\nThe dataset is read into a Polars DataFrame.")
    return

@app.cell
def _():
    # Read the dataset
    df = get_dataset('https://data.bs.ch/explore/dataset/100086/download')
    df = drop_all_null_columns(df)
    mo.md(f"Loaded **{df.height:,}** rows × **{df.width:,}** columns after dropping all-null columns.")
    df
    return df

@app.cell
def _(df):
    mo.md("## Quick profile")
    duplicates = int(df.is_duplicated().sum()) if df.height else 0
    schema = "\n".join([f"- `{k}`: {v}" for k, v in df.schema.items()])
    size_mb = f"{(df.estimated_size() or 0)/1_048_576:,.2f} MB"
    mo.md(
        f"""
- Approx. memory size: **{size_mb}**  
- Exact duplicates (row-wise): **{duplicates:,}**  
- Schema:
{schema}
"""
    )
    return

@app.cell
def _(df):
    mo.md("### Head (first 5 rows)")
    df.head(5)
    return

@app.cell
def _(df):
    mo.md("### Describe (numeric columns)")
    try:
        desc = df.describe()
        desc
    except Exception:
        mo.md("_No numeric columns to describe._")
    return

@app.cell
def _(df):
    mo.md("### Missingness overview (first 1,000 rows, up to 40 columns)")
    n = min(1000, df.height)
    c = min(40, df.width)
    if n == 0 or c == 0:
        mo.md("_Dataset empty._")
    else:
        sub = df.select(df.columns[:c]).head(n)
        miss = sub.to_pandas().isna().to_numpy()
        plt.figure()
        plt.imshow(miss, aspect="auto", interpolation="nearest")
        plt.title("Missingness matrix (True=missing)")
        plt.xlabel("columns")
        plt.ylabel("rows")
        plt.show()
    return

@app.cell
def _(df):
    mo.md("### Histograms (numeric)")
    num_cols = [c for c, t in df.schema.items() if pl.datatypes.is_numeric(t)]
    if not num_cols:
        mo.md("_No numeric data to plot._")
    else:
        for c in num_cols[:24]:  # cap to avoid excessive plots
            s = df.select(c).drop_nulls()
            if s.height == 0:
                continue
            plt.figure()
            plt.hist(s.to_series().to_list(), bins=25)
            plt.title(f"Histogram: {c}")
            plt.tight_layout()
            plt.show()
    return

@app.cell
def _():
    mo.md(f"**Questions about the data?** {CONTACT}")
    return

if __name__ == "__main__":
    app.run()
