# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100108**
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Coronavirus (COVID-19): Fallzahlen und Inzidenzen Basel-Stadt**
    **Description**: <p>Dieser Datensatz zeigt die Anzahl positiv auf SARS-CoV-2 getesteter Personen mit Wohnsitz im Kanton Basel-Stadt sowie die kumulierten Werte über die letzten 7 resp. 14 Tage, die jeweiligen Mittelwerte und die Inzidenzen pro 100 000 EinwohnerInnen gemäss <a href="https://www.bfs.admin.ch/bfs/de/home/statistiken/bevoelkerung/erhebungen/statpop.html" target="_blank">STATPOP</a>. </p><p>Die Zahlen werden gemäss dem Datum des Test-Resultats ausgewiesen, also gemäss jenem Datum, an dem ein Testresultat vorliegt. Dies geschieht in aller Regel innerhalb von 24 Stunden nach einem erfolgten Test. Bei nachträglich eintreffenden Meldungen werden die Zahlen der Vortage entsprechend korrigiert.</p><p></p><ul style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></ul><p></p><p><b style="box-sizing: border-box; font-weight: bolder;">Änderungsprotokoll:</b></p><ul><li>Die Erhebung der Werte wurde per 5. Juli 2023 sistiert. Der Datensatz wird nicht mehr aktualisiert. Aktualisierungsintervall von "WEEKLY" auf "NEVER" geändert.</li></ul><p><br></p>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100108)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100108`
- **Title** `Coronavirus (COVID-19): Fallzahlen und Inzidenzen Basel-Stadt`
- **Description** `<p>Dieser Datensatz zeigt die Anzahl positiv auf SARS-CoV-2 getesteter Personen mit Wohnsitz im Kanton Basel-Stadt sowie die kumulierten Werte über die letzten 7 resp. 14 Tage, die jeweiligen Mittelwerte und die Inzidenzen pro 100 000 EinwohnerInnen gemäss <a href="https://www.bfs.admin.ch/bfs/de/home/statistiken/bevoelkerung/erhebungen/statpop.html" target="_blank">STATPOP</a>. </p><p>Die Zahlen werden gemäss dem Datum des Test-Resultats ausgewiesen, also gemäss jenem Datum, an dem ein Testresultat vorliegt. Dies geschieht in aller Regel innerhalb von 24 Stunden nach einem erfolgten Test. Bei nachträglich eintreffenden Meldungen werden die Zahlen der Vortage entsprechend korrigiert.</p><p></p><ul style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></ul><p></p><p><b style="box-sizing: border-box; font-weight: bolder;">Änderungsprotokoll:</b></p><ul><li>Die Erhebung der Werte wurde per 5. Juli 2023 sistiert. Der Datensatz wird nicht mehr aktualisiert. Aktualisierungsintervall von "WEEKLY" auf "NEVER" geändert.</li></ul><p><br></p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2020-12-04`
- **Modified** `2024-03-13T14:01:44+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `2020-02-26T23:00:00+00:00`
- **Temporal_coverage_end_date** `2023-07-04T22:00:00+00:00`
- **Themes** `['Gesundheit']`
- **Keywords** `['Krankheit', 'Gesundheit', 'Coronavirus', 'Corona', 'COVID-19', 'Test', 'Inzidenz', 'Fallzahlen', 'Lungenentzündung']`
- **Publisher** `Medizinische Dienste`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url = f"https://data.bs.ch/api/explore/v2.1/catalog/datasets/{dataset_id}/exports/csv"
        r = requests.get(
            url, 
            params={
                "timezone": "Europe%2FZurich",
                "use_labels": "true"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100108")
    df
    return (df,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except ValueError:
        print("No numerical data to plot.")
    return

@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
