# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100465**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Gesammelte PET-Einwegflaschen im Kanton Basel-Stadt**
    **Description**: Der Datensatz enthält die jährlich gesammelten Mengen an PET-Einweg-Getränkeflaschen im Kanton Basel-Stadt, gemessen in Kilogramm. Die Daten werden von PET-Recycling Schweiz erhoben und dem Statistischen Amt Basel-Stadt nach Kalenderjahr übermittelt. Abgebildet ist der Zeitraum ab 2014 mit jährlicher Aktualisierung. Erfasst werden ausschliesslich PET-Einweg-Getränkeflaschen, keine Mehrwegflaschen oder andere Kunststoffverpackungen. Die Mengen beruhen auf den Rückmeldungen von Sammelstellen, Detailhandel und Logistikpartnern und stellen aggregierte Jahreswerte für den gesamten Kanton Basel-Stadt dar. Da die PET-Getränkeflaschen in der Schweiz über ein effizientes, optimiertes, nationales Logistiknetzwerk gesammelt und rückgeführt werden, ist eine messerscharfe Eingrenzung auf den Kanton Basel-Stadt nicht möglich. Es kann sein, dass Sammelmengen von Detailhandelsfilialen im Kanton Basel-Stadt in ein Distributionszentrum ausserhalb des Kantons überführt werden und somit in den gemeldeten Daten nicht vorhanden sind. Schwankungen im Zeitverlauf können unter anderem durch veränderte Abfüllpraktiken (leichtere Flaschen, vermehrter Einsatz von Aluminiumdosen), die Verlagerung von Sammelstellen oder gesamtgesellschaftliche Trends in der Abfallvermeidung erklärt werden.

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100465)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100465`
- **Title** `Gesammelte PET-Einwegflaschen im Kanton Basel-Stadt`
- **Description** `Der Datensatz enthält die jährlich gesammelten Mengen an PET-Einweg-Getränkeflaschen im Kanton Basel-Stadt, gemessen in Kilogramm. Die Daten werden von PET-Recycling Schweiz erhoben und dem Statistischen Amt Basel-Stadt nach Kalenderjahr übermittelt. Abgebildet ist der Zeitraum ab 2014 mit jährlicher Aktualisierung. Erfasst werden ausschliesslich PET-Einweg-Getränkeflaschen, keine Mehrwegflaschen oder andere Kunststoffverpackungen. Die Mengen beruhen auf den Rückmeldungen von Sammelstellen, Detailhandel und Logistikpartnern und stellen aggregierte Jahreswerte für den gesamten Kanton Basel-Stadt dar. Da die PET-Getränkeflaschen in der Schweiz über ein effizientes, optimiertes, nationales Logistiknetzwerk gesammelt und rückgeführt werden, ist eine messerscharfe Eingrenzung auf den Kanton Basel-Stadt nicht möglich. Es kann sein, dass Sammelmengen von Detailhandelsfilialen im Kanton Basel-Stadt in ein Distributionszentrum ausserhalb des Kantons überführt werden und somit in den gemeldeten Daten nicht vorhanden sind. Schwankungen im Zeitverlauf können unter anderem durch veränderte Abfüllpraktiken (leichtere Flaschen, vermehrter Einsatz von Aluminiumdosen), die Verlagerung von Sammelstellen oder gesamtgesellschaftliche Trends in der Abfallvermeidung erklärt werden.`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2025-10-01`
- **Modified** `2025-08-26T13:07:40+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `None`
- **Temporal_coverage_end_date** `None`
- **Themes** `['Raum und Umwelt']`
- **Keywords** `['Abfall']`
- **Publisher** `Statistisches Amt`
- **Reference** `https://statistik.bs.ch`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url = f"https://data.bs.ch/api/explore/v2.1/catalog/datasets/{dataset_id}/exports/csv"
        r = requests.get(
            url, 
            params={
                "timezone": "Europe%2FZurich",
                "use_labels": "true"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100465")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
