# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100268**
    """
    )
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Einzelmessungen der Smiley-Geschwindigkeitsanzeigen**
    **Description**: <p>Einzelmessungen der Smiley-Geschwindigkeitsanzeigen der Kantonspolizei Basel-Stadt ab 2023 (Zeitpunkt des Beginns der Messung). Die Smiley-Geschwindigkeitsanzeigen sind nicht geeicht und entsprechend können die Werte von der tatsächlich gefahrenen Geschwindigkeit abweichen. Hinweis: Die Messungen sind nicht repräsentativ für das ganze Jahr und müssen im Kontext des Erhebungsdatums betrachtet werden. Darüber hinaus wurden gewisse Messungen während einer ausserordentlichen Verkehrsführung (z.B. Umleitungsverkehr infolge von Baustellentätigkeiten etc.) erhoben. Manipulationen an Geräten können zu fehlerhaften Messungen führen.</p><p class="MsoNormal"><span class="ui-provider">Die Geschwindigkeitsmessungen
durchlaufen vier Phasen: <b>Vormessung</b>, <b>Betrieb</b>, <b>Nachmessung</b> und <b>nach Ende</b>. In der
Vormessungsphase wird die Geschwindigkeit der Fahrzeuge an den
Smiley-Geschwindigkeitsanzeigen gemessen, wobei die Anzeigen nicht aktiviert
sind. In der Betriebsphase sind die Smiley-Geschwindigkeitsanzeigen hingegen
eingeschaltet. Nachfolgend werden die Anzeigen ausgeschaltet und die
Geschwindigkeit der Fahrzeuge an den Smiley-Geschwindigkeitsanzeigen wird
erneut gemessen. Die letzte Phase "nach Ende" sind Messungen, die
ausserhalb des im Projekt definierten Zeitraums vorfallen. </span></p><p class="MsoNormal">Aus Kostengründen sind nur die Werte der letzten zwei Zyklen als Tabelle / Visualisierung sichtbar.</p><p class="MsoNormal"><span class="ui-provider"><o:p>Eine Vorschau aller Daten ist hier zu finden: </o:p></span><a href="https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen" target="_blank">https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen</a><span class="ui-provider"><o:p> </o:p></span></p><p class="MsoNormal"><span class="ui-provider"><o:p>Alle Daten in dem Format wie in dieser Tabelle können hier heruntergeladen werden: </o:p></span><a href="https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv" target="_blank">https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv</a> </p>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100268)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100268`
- **Title** `Einzelmessungen der Smiley-Geschwindigkeitsanzeigen`
- **Description** `<p>Einzelmessungen der Smiley-Geschwindigkeitsanzeigen der Kantonspolizei Basel-Stadt ab 2023 (Zeitpunkt des Beginns der Messung). Die Smiley-Geschwindigkeitsanzeigen sind nicht geeicht und entsprechend können die Werte von der tatsächlich gefahrenen Geschwindigkeit abweichen. Hinweis: Die Messungen sind nicht repräsentativ für das ganze Jahr und müssen im Kontext des Erhebungsdatums betrachtet werden. Darüber hinaus wurden gewisse Messungen während einer ausserordentlichen Verkehrsführung (z.B. Umleitungsverkehr infolge von Baustellentätigkeiten etc.) erhoben. Manipulationen an Geräten können zu fehlerhaften Messungen führen.</p><p class="MsoNormal"><span class="ui-provider">Die Geschwindigkeitsmessungen
durchlaufen vier Phasen: <b>Vormessung</b>, <b>Betrieb</b>, <b>Nachmessung</b> und <b>nach Ende</b>. In der
Vormessungsphase wird die Geschwindigkeit der Fahrzeuge an den
Smiley-Geschwindigkeitsanzeigen gemessen, wobei die Anzeigen nicht aktiviert
sind. In der Betriebsphase sind die Smiley-Geschwindigkeitsanzeigen hingegen
eingeschaltet. Nachfolgend werden die Anzeigen ausgeschaltet und die
Geschwindigkeit der Fahrzeuge an den Smiley-Geschwindigkeitsanzeigen wird
erneut gemessen. Die letzte Phase "nach Ende" sind Messungen, die
ausserhalb des im Projekt definierten Zeitraums vorfallen. </span></p><p class="MsoNormal">Aus Kostengründen sind nur die Werte der letzten zwei Zyklen als Tabelle / Visualisierung sichtbar.</p><p class="MsoNormal"><span class="ui-provider"><o:p>Eine Vorschau aller Daten ist hier zu finden: </o:p></span><a href="https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen" target="_blank">https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen</a><span class="ui-provider"><o:p> </o:p></span></p><p class="MsoNormal"><span class="ui-provider"><o:p>Alle Daten in dem Format wie in dieser Tabelle können hier heruntergeladen werden: </o:p></span><a href="https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv" target="_blank">https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv</a> </p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2023-12-19`
- **Modified** `2025-09-17T08:18:39+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `2024-05-05T22:00:00+00:00`
- **Temporal_coverage_end_date** `2025-03-19T23:00:00+00:00`
- **Themes** `['Mobilität und Verkehr', 'Öffentliche Ordnung und Sicherheit']`
- **Keywords** `['Smiley', 'Tempolimit', 'Verkehr', 'Tagesverkehr', 'Tempo', 'Vormessung', 'Nachmessung']`
- **Publisher** `Kantonspolizei`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url=f"https://data.bs.ch/explore/dataset/{dataset_id}/download"
        r = requests.get(
            url, 
            params={
                "format": "csv", 
                "timezone": "Europe%2FZurich"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100268")
    df
    return (df,)


@app.cell
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except pd.errors.DataError:
        print("No numerical data to plot.")
    return

@app.cell
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
