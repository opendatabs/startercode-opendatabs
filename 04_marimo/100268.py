# 100268 — marimo starter (Polars)
# Run:  marimo run 04_marimo/100268.py   (or: marimo edit ...)

# /// script
# requires-python = ">=3.10"
# dependencies = [
#   "marimo>=0.8.0",
#   "polars>=1.5.0",
#   "pandas>=2.0.0",
#   "matplotlib>=3.8.0",
#   "requests>=2.31.0"
# ]
# ///

import os
import io
import requests
import polars as pl
import pandas as pd
import marimo as mo
import matplotlib.pyplot as plt

app = mo.App()

PROVIDER = """Statistisches Amt des Kantons Basel-Stadt - Fachstelle OGD"""
IDENTIFIER = """100268"""
TITLE = """Einzelmessungen der Smiley-Geschwindigkeitsanzeigen"""
DESCRIPTION = """<p>Einzelmessungen der Smiley-Geschwindigkeitsanzeigen der Kantonspolizei Basel-Stadt ab 2023 (Zeitpunkt des Beginns der Messung). Die Smiley-Geschwindigkeitsanzeigen sind nicht geeicht und entsprechend können die Werte von der tatsächlich gefahrenen Geschwindigkeit abweichen. Hinweis: Die Messungen sind nicht repräsentativ für das ganze Jahr und müssen im Kontext des Erhebungsdatums betrachtet werden. Darüber hinaus wurden gewisse Messungen während einer ausserordentlichen Verkehrsführung (z.B. Umleitungsverkehr infolge von Baustellentätigkeiten etc.) erhoben. Manipulationen an Geräten können zu fehlerhaften Messungen führen.</p><p class='MsoNormal'><span class='ui-provider'>Die Geschwindigkeitsmessungen
durchlaufen vier Phasen: <b>Vormessung</b>, <b>Betrieb</b>, <b>Nachmessung</b> und <b>nach Ende</b>. In der
Vormessungsphase wird die Geschwindigkeit der Fahrzeuge an den
Smiley-Geschwindigkeitsanzeigen gemessen, wobei die Anzeigen nicht aktiviert
sind. In der Betriebsphase sind die Smiley-Geschwindigkeitsanzeigen hingegen
eingeschaltet. Nachfolgend werden die Anzeigen ausgeschaltet und die
Geschwindigkeit der Fahrzeuge an den Smiley-Geschwindigkeitsanzeigen wird
erneut gemessen. Die letzte Phase 'nach Ende' sind Messungen, die
ausserhalb des im Projekt definierten Zeitraums vorfallen. </span></p><p class='MsoNormal'>Aus Kostengründen sind nur die Werte der letzten zwei Zyklen als Tabelle / Visualisierung sichtbar.</p><p class='MsoNormal'><span class='ui-provider'><o:p>Eine Vorschau aller Daten ist hier zu finden: </o:p></span><a href='https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen' target='_blank'>https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen</a><span class='ui-provider'><o:p> </o:p></span></p><p class='MsoNormal'><span class='ui-provider'><o:p>Alle Daten in dem Format wie in dieser Tabelle können hier heruntergeladen werden: </o:p></span><a href='https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv' target='_blank'>https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv</a> </p>"""
CONTACT = """Fachstelle für OGD Basel-Stadt | opendata@bs.ch"""
DATASHOP_MD_LINK = """[Direct data shop link for dataset](https://data.bs.ch/explore/dataset/100268)"""

def _ensure_data_dir():
    data_path = os.path.join(os.getcwd(), "..", "data")
    os.makedirs(data_path, exist_ok=True)
    return data_path

def get_dataset(url: str) -> pl.DataFrame:
    _ensure_data_dir()
    csv_path = os.path.join("..", "data", f"{IDENTIFIER}.csv")

    try:
        r = requests.get(
            url,
            params={"format": "csv", "timezone": "Europe%2FZurich"},
            timeout=60,
        )
        r.raise_for_status()
        with open(csv_path, "wb") as f:
            f.write(r.content)
        content = io.BytesIO(r.content)
    except Exception:
        content = csv_path if os.path.exists(csv_path) else None

    if content is None:
        raise RuntimeError("Could not download or locate dataset locally.")

    for sep in (";", ",", "\t"):
        try:
            df = pl.read_csv(
                content,
                separator=sep,
                ignore_errors=True,
                infer_schema_length=2000,
            )
            if df.width > 1:
                return df
        except Exception:
            if hasattr(content, "seek"):
                content.seek(0)

    return pl.read_csv(content, ignore_errors=True, infer_schema_length=2000)

def drop_all_null_columns(df: pl.DataFrame) -> pl.DataFrame:
    if df.height == 0:
        return df
    null_counts_row = df.null_count().row(0)
    cols_keep = [c for c, n in zip(df.columns, null_counts_row) if n < df.height]
    return df.select(cols_keep)

@app.cell
def _():
    mo.md(
        f"""## Open Government Data, provided by **{PROVIDER}**
*Autogenerated Python (marimo) starter for dataset* **`{IDENTIFIER}`**"""
    )
    return

@app.cell
def _():
    mo.md(
        f"""## Dataset
# **{TITLE}**"""
    )
    return

@app.cell
def _():
    mo.md(
        """## Data set links

""" + DATASHOP_MD_LINK
    )
    return

@app.cell
def _():
    mo.md(
        """## Metadata
- **Dataset_identifier** `100268`
- **Title** `Einzelmessungen der Smiley-Geschwindigkeitsanzeigen`
- **Description** `<p>Einzelmessungen der Smiley-Geschwindigkeitsanzeigen der Kantonspolizei Basel-Stadt ab 2023 (Zeitpunkt des Beginns der Messung). Die Smiley-Geschwindigkeitsanzeigen sind nicht geeicht und entsprechend können die Werte von der tatsächlich gefahrenen Geschwindigkeit abweichen. Hinweis: Die Messungen sind nicht repräsentativ für das ganze Jahr und müssen im Kontext des Erhebungsdatums betrachtet werden. Darüber hinaus wurden gewisse Messungen während einer ausserordentlichen Verkehrsführung (z.B. Umleitungsverkehr infolge von Baustellentätigkeiten etc.) erhoben. Manipulationen an Geräten können zu fehlerhaften Messungen führen.</p><p class="MsoNormal"><span class="ui-provider">Die Geschwindigkeitsmessungen
durchlaufen vier Phasen: <b>Vormessung</b>, <b>Betrieb</b>, <b>Nachmessung</b> und <b>nach Ende</b>. In der
Vormessungsphase wird die Geschwindigkeit der Fahrzeuge an den
Smiley-Geschwindigkeitsanzeigen gemessen, wobei die Anzeigen nicht aktiviert
sind. In der Betriebsphase sind die Smiley-Geschwindigkeitsanzeigen hingegen
eingeschaltet. Nachfolgend werden die Anzeigen ausgeschaltet und die
Geschwindigkeit der Fahrzeuge an den Smiley-Geschwindigkeitsanzeigen wird
erneut gemessen. Die letzte Phase "nach Ende" sind Messungen, die
ausserhalb des im Projekt definierten Zeitraums vorfallen. </span></p><p class="MsoNormal">Aus Kostengründen sind nur die Werte der letzten zwei Zyklen als Tabelle / Visualisierung sichtbar.</p><p class="MsoNormal"><span class="ui-provider"><o:p>Eine Vorschau aller Daten ist hier zu finden: </o:p></span><a href="https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen" target="_blank">https://datatools.bs.ch/Smiley-Geschwindigkeitsmessungen</a><span class="ui-provider"><o:p> </o:p></span></p><p class="MsoNormal"><span class="ui-provider"><o:p>Alle Daten in dem Format wie in dieser Tabelle können hier heruntergeladen werden: </o:p></span><a href="https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv" target="_blank">https://data-bs.ch/stata/kapo/smileys/all_data/all_data.csv</a> </p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2023-12-19`
- **Modified** `2025-09-16T08:12:17+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `2024-05-05T22:00:00+00:00`
- **Temporal_coverage_end_date** `2025-03-19T23:00:00+00:00`
- **Themes** `['Mobilität und Verkehr', 'Öffentliche Ordnung und Sicherheit']`
- **Keywords** `['Smiley', 'Tempolimit', 'Verkehr', 'Tagesverkehr', 'Tempo', 'Vormessung', 'Nachmessung']`
- **Publisher** `Kantonspolizei`
- **Reference** `None`
"""
    )
    return

@app.cell
def _():
    mo.md(
        """## Imports and helper functions
Using Polars for speed and memory efficiency."""
    )
    return

@app.cell
def _():
    pass

@app.cell
def _():
    mo.md(
        """## Load data
The dataset is read into a Polars DataFrame."""
    )
    return

@app.cell
def _():
    df = get_dataset('https://data.bs.ch/explore/dataset/100268/download?format=csv&timezone=Europe%2FZurich')
    df = drop_all_null_columns(df)
    mo.md(
        f"Loaded **{df.height:,}** rows × **{df.width:,}** columns after dropping all-null columns."
    )
    df
    return df

@app.cell
def _(df):
    mo.md("## Quick profile")
    duplicates = int(df.is_duplicated().sum()) if df.height else 0
    schema = "\n".join([f"- `{k}`: {v}" for k, v in df.schema.items()])
    try:
        size_mb = f"{(df.estimated_size() or 0)/1_048_576:,.2f} MB"
    except Exception:
        size_mb = "n/a"
    mo.md(
        f"""- Approx. memory size: **{size_mb}**  
- Exact duplicates (row-wise): **{duplicates:,}**  
- Schema:
{schema}"""
    )
    return

@app.cell
def _(df):
    mo.md("### Head (first 5 rows)")
    df.head(5)
    return

@app.cell
def _(df):
    mo.md("### Describe (numeric columns)")
    try:
        desc = df.describe()
        desc
    except Exception:
        mo.md("_No numeric columns to describe._")
    return

@app.cell
def _(df):
    mo.md("### Missingness overview (first 1,000 rows, up to 40 columns)")
    n = min(1000, df.height)
    c = min(40, df.width)
    if n == 0 or c == 0:
        mo.md("_Dataset empty._")
    else:
        sub = df.select(df.columns[:c]).head(n)
        miss = sub.to_pandas().isna().to_numpy()
        plt.figure()
        plt.imshow(miss, aspect="auto", interpolation="nearest")
        plt.title("Missingness matrix (True=missing)")
        plt.xlabel("columns")
        plt.ylabel("rows")
        plt.tight_layout()
        plt.show()
    return

@app.cell
def _(df):
    mo.md("### Histograms (numeric)")
    num_cols = [c for c, t in df.schema.items() if pl.datatypes.is_numeric(t)]
    if not num_cols:
        mo.md("_No numeric data to plot._")
    else:
        for c in num_cols[:24]:
            s = df.select(c).drop_nulls()
            if s.height == 0:
                continue
            plt.figure()
            plt.hist(s.to_series().to_list(), bins=25)
            plt.title(f"Histogram: {c}")
            plt.tight_layout()
            plt.show()
    return

@app.cell
def _():
    mo.md(f"""**Questions about the data?** {CONTACT}""")
    return

if __name__ == "__main__":
    app.run()
