# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "matplotlib==3.10.6",
#     "missingno==0.5.2",
#     "pandas==2.3.2",
#     "polars==1.32.3",
#     "requests==2.32.5",
# ]
# ///

import marimo

__generated_with = "0.15.1"
app = marimo.App(auto_download=["html"])


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Open Government Data, provided by **Statistisches Amt des Kantons Basel-Stadt - DCC Data Competence Center**
    *Autogenerated Python starter code for dataset with identifier* **100389**
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## Dataset
    # **Sprayereien**
    **Description**: <p>Dieser Datensatz enthält Informationen über Sprayereien im Kanton Basel-Stadt, die sowohl öffentliche Anlagen (SprayEx) als auch private Gebäude (SprayOut) betreffen und von den zuständigen Stellen erfasst wurden. Daten von Sprayereien an privaten Gebäuden werden seit dem 31. Oktober 2023 ausgewiesen.</p><p>Die Daten beziehen sich ausschliesslich auf abgeschlossene Fälle, das heisst Sprayereien, die bereits entfernt worden sind.</p><p>Die genauen geografischen Koordinaten der Vorfälle werden einem 50x50-Meter-Raster zugeordnet. Der südwestliche Eckpunkt dieses Rasters wird als Geopunkt ausgewiesen, um die Anonymität der betroffenen Objekte zu gewährleisten.</p>

    *You can find the dataset [under this link](https://data.bs.ch/explore/dataset/100389)*.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// details | Metadata

    - **Dataset_identifier** `100389`
- **Title** `Sprayereien`
- **Description** `<p>Dieser Datensatz enthält Informationen über Sprayereien im Kanton Basel-Stadt, die sowohl öffentliche Anlagen (SprayEx) als auch private Gebäude (SprayOut) betreffen und von den zuständigen Stellen erfasst wurden. Daten von Sprayereien an privaten Gebäuden werden seit dem 31. Oktober 2023 ausgewiesen.</p><p>Die Daten beziehen sich ausschliesslich auf abgeschlossene Fälle, das heisst Sprayereien, die bereits entfernt worden sind.</p><p>Die genauen geografischen Koordinaten der Vorfälle werden einem 50x50-Meter-Raster zugeordnet. Der südwestliche Eckpunkt dieses Rasters wird als Geopunkt ausgewiesen, um die Anonymität der betroffenen Objekte zu gewährleisten.</p>`
- **Contact_name** `Open Data Basel-Stadt`
- **Issued** `2025-01-08`
- **Modified** `2025-10-16T13:01:15+00:00`
- **Rights** `NonCommercialAllowed-CommercialAllowed-ReferenceRequired`
- **Temporal_coverage_start_date** `2018-07-02T22:00:00+00:00`
- **Temporal_coverage_end_date** `2025-10-14T22:00:00+00:00`
- **Themes** `['Öffentliche Ordnung und Sicherheit', 'Raum und Umwelt']`
- **Keywords** `['Graffiti', 'Street Art', 'Wandkunst', 'öffentliche Kunst', 'Kultur', 'Wandbilder']`
- **Publisher** `Stadtreinigung`
- **Reference** `None`


    ///
    """
    )
    return


@app.cell
def _():
    import os
    import pandas as pd
    import requests
    import matplotlib.pyplot as plt
    return os, pd, plt, requests


@app.cell
def _(plt):
    plt.style.use("ggplot")

    params = {
        "text.color": (0.25, 0.25, 0.25),
        "figure.figsize": [18, 6],
    }

    plt.rcParams.update(params)
    return


@app.cell
def _(os, pd, requests):
    def get_dataset(dataset_id):
        url = f"https://data.bs.ch/api/explore/v2.1/catalog/datasets/{dataset_id}/exports/csv"
        r = requests.get(
            url, 
            params={
                "timezone": "Europe%2FZurich",
                "use_labels": "true"
            }
        )
        data_path = os.path.join(os.getcwd(), "..", "data")
        if not os.path.exists(data_path):
            os.makedirs(data_path)
        csv_path = os.path.join(data_path, f"{dataset_id}.csv")
        with open(csv_path, "wb") as f:
            f.write(r.content)
        data = pd.read_csv(
            url, sep=";", on_bad_lines="warn", encoding_errors="ignore", low_memory=False
        )
        # if dataframe only has one column or less the data is not ";" separated
        if data.shape[1] <= 1:
            print(
                "The data wasn't imported properly. Very likely the correct separator couldn't be found.\nPlease check the dataset manually and adjust the code."
            )
        return data
    return (get_dataset,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Load data""")
    return


@app.cell
def _(get_dataset):
    # Read the dataset
    df = get_dataset(dataset_id="100389")
    df
    return (df,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## Analyze Data""")
    return


@app.cell
def _(df):
    # check missing values with missingno
    # https://github.com/ResidentMario/missingno
    import missingno as msno

    msno.matrix(df, labels=True, sort="descending")
    return


@app.cell
def _(df):
    df.info(memory_usage="deep", verbose=True)
    return


@app.cell
def _(df, pd, plt):
    # plot a histogram for each numerical feature
    try:
        df.hist(bins=25, rwidth=0.9)
        plt.tight_layout()
        plt.show()
    except ValueError:
        print("No numerical data to plot.")
    return

@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**Questions about the data?** Open Data Basel-Stadt | opendata@bs.ch""")
    return

if __name__ == "__main__":
    app.run()
